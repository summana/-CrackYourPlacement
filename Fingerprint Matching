{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":58521,"sourceType":"datasetVersion","datasetId":38300}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install opencv-python","metadata":{"execution":{"iopub.status.busy":"2024-09-02T13:28:47.475363Z","iopub.execute_input":"2024-09-02T13:28:47.475768Z","iopub.status.idle":"2024-09-02T13:29:01.786670Z","shell.execute_reply.started":"2024-09-02T13:28:47.475731Z","shell.execute_reply":"2024-09-02T13:29:01.785404Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: opencv-python in /opt/conda/lib/python3.10/site-packages (4.10.0.84)\nRequirement already satisfied: numpy>=1.21.2 in /opt/conda/lib/python3.10/site-packages (from opencv-python) (1.26.4)\n","output_type":"stream"}]},{"cell_type":"code","source":"import cv2\nimport os\n\nsample = cv2.imread(\"/kaggle/input/socofing/SOCOFing/Altered/Altered-Hard/100__M_Right_thumb_finger_Zcut.BMP\")\nimg = None\nfilename = None\nkp1, kp2, mp = None, None, None\nbest_score = 0\n\n# Make sure to correctly concatenate file paths\nimage_dir = \"/kaggle/input/socofing/\"\n\n# Iterate over files in the directory (assuming Real is the correct directory)\nfor file in os.listdir(image_dir)[:1000]:\n    fingerprint_image = cv2.imread(os.path.join(image_dir, file))\n    \n    # Check if the image was loaded correctly\n    if fingerprint_image is None:\n        print(f\"Warning: Could not load image {file}. Skipping.\")\n        continue\n\n    sift = cv2.SIFT_create()\n    keypts_1, descriptors_1 = sift.detectAndCompute(sample, None)\n    keypts_2, descriptors_2 = sift.detectAndCompute(fingerprint_image, None)\n\n    if descriptors_2 is None:\n        print(f\"Warning: No descriptors found for image {file}. Skipping.\")\n        continue\n\n    matches = cv2.FlannBasedMatcher({'algorithm': 1, 'trees': 10}, {}).knnMatch(descriptors_1, descriptors_2, k=2)\n    match_pt = []\n    for p, q in matches:\n        if p.distance < 0.1 * q.distance:\n            match_pt.append(p)\n    \n    keypoints = min(len(keypts_1), len(keypts_2))\n    \n    if keypoints > 0:\n        score = len(match_pt) / keypoints * 100\n        if score > best_score:\n            best_score = score\n            filename = file\n            img = fingerprint_image\n            kp1, kp2, mp = keypts_1, keypts_2, match_pt\n\nprint(\"Best match:\", filename)\nprint(\"Score:\", best_score)\n\nif img is not None:\n    result = cv2.drawMatches(sample, kp1, img, kp2, mp, None)\n    result = cv2.resize(result, None, fx=4, fy=4)\n    cv2.imshow(\"RESULT\", result)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\nelse:\n    print(\"No valid match found.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-02T13:53:38.655330Z","iopub.execute_input":"2024-09-02T13:53:38.655823Z","iopub.status.idle":"2024-09-02T13:53:38.738166Z","shell.execute_reply.started":"2024-09-02T13:53:38.655781Z","shell.execute_reply":"2024-09-02T13:53:38.736743Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Warning: Could not load image SOCOFing. Skipping.\nWarning: Could not load image socofing. Skipping.\nBest match: None\nScore: 0\nNo valid match found.\n","output_type":"stream"}]}]}